<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.dotson.iDeviceSync</string>
	<key>connections</key>
	<dict>
		<key>44F6B064-5DE7-4509-A7FF-01E187D994B1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8B46341E-2253-434C-BD48-A6577ECE29CC</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>AA284081-716A-488B-973C-56F9ED5CE156</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E6F6549E-C002-4959-8164-F79904FA0A94</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BADBE521-F341-4187-8307-7D14EADD3C5A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>AA284081-716A-488B-973C-56F9ED5CE156</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E6F6549E-C002-4959-8164-F79904FA0A94</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>44F6B064-5DE7-4509-A7FF-01E187D994B1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>8DF8D4C7-6E09-4C8A-B040-011DE86199B4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>C. Dotson</string>
	<key>description</key>
	<string>A workflow for syncing your iDevices.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>iDevice Sync</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>4</integer>
				<key>keyword</key>
				<string>sync</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for all devicesâ€¦</string>
				<key>script</key>
				<string>set workflowFolder to do shell script "pwd"set wlib to load script POSIX file (workflowFolder &amp; "/q_workflow.scpt")set wf to wlib's new_workflow()--add_result of wf with isValid given theUid:"", theArg:"syncAll", theTitle:"Available Devices:", theAutocomplete:"", theSubtitle:"", theIcon:"icon.png", theType:""set mynames to {system attribute "device00",system attribute "device01",system attribute "device02",system attribute "device03",system attribute "device04",system attribute "device05",system attribute "device06",system attribute "device07",system attribute "device08",system attribute "device09"}-- SORT DEVICE LIST
-- THIS CAN BE COMMENTED OUT TO USE ALFRED ORDERINGon simple_sort(my_list)	set the index_list to {}	set the sorted_list to {}	repeat (the number of items in my_list) times		set the low_item to ""		repeat with i from 1 to (number of items in my_list)			if i is not in the index_list then				set this_item to item i of my_list as text				if the low_item is "" then					set the low_item to this_item					set the low_item_index to i				else if this_item comes before the low_item then					set the low_item to this_item					set the low_item_index to i				end if			end if		end repeat		set the end of sorted_list to the low_item		set the end of the index_list to the low_item_index	end repeat	return the sorted_listend simple_sortset mynames to my simple_sort(mynames)-- CREATE LIST USING NON-BLANK DEVICE NAMES FROM VARIABLE LISTrepeat with s in mynames	set myname to s	if contents of myname is not ""	add_result of wf with isValid given theUid:"", theArg:myname, theTitle:"Sync: " &amp; myname, theAutocomplete:"", theSubtitle:"", theIcon:"icon.png", theType:""

	end if

end repeatwf's to_xml("")</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Choose device to sync from list</string>
				<key>title</key>
				<string>Sync iTunes Devices</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E6F6549E-C002-4959-8164-F79904FA0A94</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>4</integer>
				<key>script</key>
				<string>set chosenDevice to "{query}"-- Open Finder windowtell application "Finder"	activate	open ("/" as POSIX file)end tell-- CHECK IF DEVICE IS IN FINDER WINDOWon isPhoneVisible(chosenDevice)	tell application "System Events" to tell outline 1 of scroll area 1 of splitter group 1 of window 1 of application process "Finder"		set theElements to first UI element of every row whose name is chosenDevice		repeat with e in theElements			try				if name of e is chosenDevice then					return true				end if			end try		end repeat	end tell	return falseend isPhoneVisible-- IF NOT IN FINDER WINDOW THEN RESTART DAEMONif not isPhoneVisible(chosenDevice) then	-- Restart daemon that shows the iPhone in the sidebar so it is actually visible	do shell script "pkill -9 AMPDevicesAgent AMPDeviceDiscoveryAgent"end if-- Select iPhone-- needs retry until the iPhone becomes visibletell application "System Events" to tell outline 1 of scroll area 1 of splitter group 1 of window 1 of application process "Finder"	set hasFoundPhone to false		set attempts to 0	repeat while not hasFoundPhone		set attempts to attempts + 1		if attempts = 10 then return "Sorry, device not found in Finder window"		set theElements to first UI element of every row whose name is chosenDevice		repeat with e in theElements			try				if name of e is chosenDevice then					tell e to perform action "AXOpen"					set hasFoundPhone to true					exit repeat				end if			end try		end repeat		delay 1	end repeat	end tell-- Start synctell application "System Events" to tell application process "Finder"	repeat until button "Sync" of splitter group 1 of splitter group 1 of window chosenDevice exists		delay 1	end repeat		click button "Sync" of splitter group 1 of splitter group 1 of window chosenDeviceend tellreturn chosenDevice</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>44F6B064-5DE7-4509-A7FF-01E187D994B1</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>1</integer>
				<key>hotmod</key>
				<integer>1310720</integer>
				<key>hotstring</key>
				<string>S</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>BADBE521-F341-4187-8307-7D14EADD3C5A</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Syncing Device:</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>8B46341E-2253-434C-BD48-A6577ECE29CC</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>type</key>
			<string>alfred.workflow.utility.junction</string>
			<key>uid</key>
			<string>AA284081-716A-488B-973C-56F9ED5CE156</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist='https://raw.githubusercontent.com/dotson/iDevice-Sync/master/Source/info.plist'
readonly workflow_url='https://github.com/dotson/iDevice-Sync/raw/master/iDevice%20Sync.alfredworkflow'
readonly download_type='github_release'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  readonly local notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  readonly local terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download pageâ€¦'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installingâ€¦'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>8DF8D4C7-6E09-4C8A-B040-011DE86199B4</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>iDevice Sync
=====================

An Alfred workflow for syncing each of your iDevices individually.

A simple workflow that allows you to sync your iDevices by name. The workflow is triggered by the keyword "sync".

Upon actioning, the workflow displays all iDevices that you have listed by name in the variable list for the workflow. Actioning any of the iDevices in the list will tell Finder to look for them in a new window and start the sync. If a named device is not listed, Alfred will try a few times to find it and then throw an eeor if not found.

Known Issues:

This is based purely on GUI scripting which is easy to break if Apple changes even the smallest thing. Since Catalina, there's no other known way to do this via applescript.</string>
	<key>uidata</key>
	<dict>
		<key>44F6B064-5DE7-4509-A7FF-01E187D994B1</key>
		<dict>
			<key>xpos</key>
			<integer>505</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>8B46341E-2253-434C-BD48-A6577ECE29CC</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>8DF8D4C7-6E09-4C8A-B040-011DE86199B4</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>145</integer>
		</dict>
		<key>AA284081-716A-488B-973C-56F9ED5CE156</key>
		<dict>
			<key>xpos</key>
			<integer>215</integer>
			<key>ypos</key>
			<integer>40</integer>
		</dict>
		<key>BADBE521-F341-4187-8307-7D14EADD3C5A</key>
		<dict>
			<key>xpos</key>
			<integer>65</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>E6F6549E-C002-4959-8164-F79904FA0A94</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>10</real>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>device00</key>
		<string>My iPhone Name</string>
		<key>device01</key>
		<string>My iPad Name</string>
		<key>device02</key>
		<string></string>
		<key>device03</key>
		<string></string>
		<key>device04</key>
		<string></string>
		<key>device05</key>
		<string></string>
		<key>device06</key>
		<string></string>
		<key>device07</key>
		<string></string>
		<key>device08</key>
		<string></string>
		<key>device09</key>
		<string></string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>2.0</string>
	<key>webaddress</key>
	<string>https://github.com/dotson/iDevice-Sync</string>
</dict>
</plist>
